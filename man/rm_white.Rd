% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/rm_white.R
\name{rm_white}
\alias{ex_white}
\alias{ex_white_bracket}
\alias{ex_white_colon}
\alias{ex_white_comma}
\alias{ex_white_endmark}
\alias{ex_white_lead}
\alias{ex_white_lead_trail}
\alias{ex_white_multiple}
\alias{ex_white_punctuation}
\alias{ex_white_trail}
\alias{rm_white}
\alias{rm_white_bracket}
\alias{rm_white_colon}
\alias{rm_white_comma}
\alias{rm_white_endmark}
\alias{rm_white_lead}
\alias{rm_white_lead_trail}
\alias{rm_white_multiple}
\alias{rm_white_punctuation}
\alias{rm_white_trail}
\title{Remove/Replace/Extract White Space}
\usage{
rm_white(text.var, trim = FALSE, clean = FALSE, pattern = "@rm_white",
  replacement = "", extract = FALSE,
  dictionary = getOption("regex.library"), ...)

ex_white(text.var, trim = FALSE, clean = FALSE, pattern = "@rm_white",
  replacement = "", extract = TRUE,
  dictionary = getOption("regex.library"), ...)

rm_white_bracket(text.var, trim = !extract, clean = TRUE,
  pattern = "@rm_white_bracket", replacement = "", extract = FALSE,
  dictionary = getOption("regex.library"), ...)

ex_white_bracket(text.var, trim = !extract, clean = TRUE,
  pattern = "@rm_white_bracket", replacement = "", extract = TRUE,
  dictionary = getOption("regex.library"), ...)

rm_white_colon(text.var, trim = !extract, clean = TRUE,
  pattern = "@rm_white_colon", replacement = "", extract = FALSE,
  dictionary = getOption("regex.library"), ...)

ex_white_colon(text.var, trim = !extract, clean = TRUE,
  pattern = "@rm_white_colon", replacement = "", extract = TRUE,
  dictionary = getOption("regex.library"), ...)

rm_white_comma(text.var, trim = !extract, clean = TRUE,
  pattern = "@rm_white_comma", replacement = "", extract = FALSE,
  dictionary = getOption("regex.library"), ...)

ex_white_comma(text.var, trim = !extract, clean = TRUE,
  pattern = "@rm_white_comma", replacement = "", extract = TRUE,
  dictionary = getOption("regex.library"), ...)

rm_white_endmark(text.var, trim = !extract, clean = TRUE,
  pattern = "@rm_white_endmark", replacement = "", extract = FALSE,
  dictionary = getOption("regex.library"), ...)

ex_white_endmark(text.var, trim = !extract, clean = TRUE,
  pattern = "@rm_white_endmark", replacement = "", extract = TRUE,
  dictionary = getOption("regex.library"), ...)

rm_white_lead(text.var, trim = FALSE, clean = FALSE,
  pattern = "@rm_white_lead", replacement = "", extract = FALSE,
  dictionary = getOption("regex.library"), ...)

ex_white_lead(text.var, trim = FALSE, clean = FALSE,
  pattern = "@rm_white_lead", replacement = "", extract = TRUE,
  dictionary = getOption("regex.library"), ...)

rm_white_lead_trail(text.var, trim = FALSE, clean = FALSE,
  pattern = "@rm_white_lead_trail", replacement = "", extract = FALSE,
  dictionary = getOption("regex.library"), ...)

ex_white_lead_trail(text.var, trim = FALSE, clean = FALSE,
  pattern = "@rm_white_lead_trail", replacement = "", extract = TRUE,
  dictionary = getOption("regex.library"), ...)

rm_white_trail(text.var, trim = FALSE, clean = FALSE,
  pattern = "@rm_white_trail", replacement = "", extract = FALSE,
  dictionary = getOption("regex.library"), ...)

ex_white_trail(text.var, trim = FALSE, clean = FALSE,
  pattern = "@rm_white_trail", replacement = "", extract = TRUE,
  dictionary = getOption("regex.library"), ...)

rm_white_multiple(text.var, trim = !extract, clean = TRUE,
  pattern = "@rm_white_multiple", replacement = "", extract = FALSE,
  dictionary = getOption("regex.library"), ...)

ex_white_multiple(text.var, trim = !extract, clean = TRUE,
  pattern = "@rm_white_multiple", replacement = "", extract = TRUE,
  dictionary = getOption("regex.library"), ...)

rm_white_punctuation(text.var, trim = !extract, clean = TRUE,
  pattern = "@rm_white_punctuation", replacement = "", extract = FALSE,
  dictionary = getOption("regex.library"), ...)

ex_white_punctuation(text.var, trim = !extract, clean = TRUE,
  pattern = "@rm_white_punctuation", replacement = "", extract = TRUE,
  dictionary = getOption("regex.library"), ...)
}
\arguments{
\item{text.var}{The text variable.}

\item{trim}{logical.  If \code{TRUE} removes leading and trailing white
spaces.}

\item{clean}{trim logical.  If \code{TRUE} extra white spaces and escaped
character will be removed.}

\item{pattern}{A character string containing a regular expression (or
character string for \code{fixed = TRUE}) to be matched in the given
character vector.  Default, \code{@rm_dollar} uses the
\code{rm_dollar} regex from the regular expression dictionary from
the \code{dictionary} argument.}

\item{replacement}{Replacement for matched \code{pattern}.}

\item{extract}{logical.  If \code{TRUE} the dollar strings are extracted into a
list of vectors.}

\item{dictionary}{A dictionary of canned regular expressions to search within
if \code{pattern} begins with \code{"@rm_"}.}

\item{\dots}{Other arguments passed to \code{\link[base]{gsub}}.}
}
\value{
Returns a character string with extra white space removed.
}
\description{
\code{rm_white} - Remove multiple white space (> 1 becomes a single white
space), white space before a comma, white space before a single or
consecutive combination of a colon, semicolon, or endmark (period, question
mark, or exclamation point), white space after a left bracket ("{", "(", "[")
or before a right bracket ("}", ")", "]"), leading or trailing white space.

\code{rm_white_bracket} - Remove white space after a left bracket ("{", "(", "[")
or before a right bracket ("}", ")", "]").

\code{rm_white_colon} - Remove white space before a single or consecutive
combination of a colon, semicolon.

\code{rm_white_comma} - Remove white space before a comma.

\code{rm_white_endmark} - Remove white space before endmark(s) (".", "?", "!").

\code{rm_white_lead} - Remove leading white space.

\code{rm_white_lead_trail} - Remove leading or trailing white space.

\code{rm_white_trail} - Remove trailing white space.

\code{rm_white_multiple} - Remove multiple white space (> 1 becomes a single
white space).

\code{rm_white_punctuation} - Remove multiple white space before a comma, white
space before a single or consecutive combination of a colon, semicolon, or
endmark (period, question mark, or exclamation point).
}
\examples{
x <-  c(" There is ( $5.50 ) for , me . ", " that's [ 45.6\% ] of! the pizza !",
    "     14\% is { $26  } or $25.99 ?", "Oh ;  here's colon : Yippee !")

rm_white(x)
rm_white_bracket(x)
rm_white_colon(x)
rm_white_comma(x)
rm_white_endmark(x)
rm_white_lead(x)
rm_white_trail(x)
rm_white_lead_trail(x)
rm_white_multiple(x)
rm_white_punctuation(x)
}
\author{
\code{rm_white_endmark}/\code{rm_white_punctuation} - \href{http://stackoverflow.com}{stackoverflow}'s hwnd and Tyler Rinker <tyler.rinker@gmail.com>.
}
\references{
The \code{rm_white_endmark}/\code{rm_white_punctuation} regular expression was taken from:
\url{http://stackoverflow.com/a/25464921/1000343}
}
\seealso{
\code{\link[base]{gsub}},
\code{\link[stringi]{stri_extract_all_regex}}

Other rm_.functions: \code{\link{as_numeric}},
  \code{\link{as_numeric2}}, \code{\link{ex_number}},
  \code{\link{rm_number}}; \code{\link{as_time}},
  \code{\link{as_time2}}, \code{\link{ex_time}},
  \code{\link{ex_transcript_time}}, \code{\link{rm_time}},
  \code{\link{rm_transcript_time}};
  \code{\link{ex_abbreviation}},
  \code{\link{rm_abbreviation}}; \code{\link{ex_angle}},
  \code{\link{ex_bracket}},
  \code{\link{ex_bracket_multiple}},
  \code{\link{ex_curly}}, \code{\link{ex_round}},
  \code{\link{ex_square}}, \code{\link{rm_angle}},
  \code{\link{rm_bracket}},
  \code{\link{rm_bracket_multiple}},
  \code{\link{rm_curly}}, \code{\link{rm_round}},
  \code{\link{rm_square}}; \code{\link{ex_between}},
  \code{\link{ex_between_multiple}},
  \code{\link{rm_between}},
  \code{\link{rm_between_multiple}};
  \code{\link{ex_caps_phrase}},
  \code{\link{rm_caps_phrase}}; \code{\link{ex_caps}},
  \code{\link{rm_caps}}; \code{\link{ex_citation_tex}},
  \code{\link{rm_citation_tex}}; \code{\link{ex_citation}},
  \code{\link{rm_citation}};
  \code{\link{ex_city_state_zip}},
  \code{\link{rm_city_state_zip}};
  \code{\link{ex_city_state}}, \code{\link{rm_city_state}};
  \code{\link{ex_date}}, \code{\link{rm_date}};
  \code{\link{ex_default}}, \code{\link{rm_default}};
  \code{\link{ex_dollar}}, \code{\link{rm_dollar}};
  \code{\link{ex_email}}, \code{\link{rm_email}};
  \code{\link{ex_emoticon}}, \code{\link{rm_emoticon}};
  \code{\link{ex_endmark}}, \code{\link{rm_endmark}};
  \code{\link{ex_hash}}, \code{\link{rm_hash}};
  \code{\link{ex_nchar_words}},
  \code{\link{rm_nchar_words}}; \code{\link{ex_non_ascii}},
  \code{\link{rm_non_ascii}}; \code{\link{ex_non_words}},
  \code{\link{rm_non_words}}; \code{\link{ex_percent}},
  \code{\link{rm_percent}}; \code{\link{ex_phone}},
  \code{\link{rm_phone}}; \code{\link{ex_postal_code}},
  \code{\link{rm_postal_code}};
  \code{\link{ex_repeated_characters}},
  \code{\link{rm_repeated_characters}};
  \code{\link{ex_repeated_phrases}},
  \code{\link{rm_repeated_phrases}};
  \code{\link{ex_repeated_words}},
  \code{\link{rm_repeated_words}}; \code{\link{ex_tag}},
  \code{\link{rm_tag}}; \code{\link{ex_title_name}},
  \code{\link{rm_title_name}};
  \code{\link{ex_twitter_url}}, \code{\link{ex_url}},
  \code{\link{rm_twitter_url}}, \code{\link{rm_url}};
  \code{\link{ex_zip}}, \code{\link{rm_zip}}
}
\keyword{percent}

